package github

import (
	"fmt"
	"math"
	"os"
	"strings"

	"github.com/NickRTR/WakaTime-Readme/stats"
)

func Create7DaysGraph(langs stats.Languages) string {
	theme := os.Getenv("THEME")

	var empty string
	var done string

	switch theme {
	case "block-green":
		empty = "â¬œ"
		done = "ðŸŸ©"
	case "block-yellow":
		empty = "â¬œ"
		done = "ðŸŸ¨"
	case "block-red":
		empty = "â¬œ"
		done = "ðŸŸ¥"
	case "block-purple":
		empty = "â¬œ"
		done = "ðŸŸª"
	case "block-orange":
		empty = "â¬œ"
		done = "ðŸŸ§"
	case "block-blue":
		empty = "â¬œ"
		done = "ðŸŸ¦"
	case "block-black":
		empty = "â¬œ"
		done = "â¬›"

	case "circle-green":
		empty = "âšª"
		done = "ðŸŸ¢"
	case "circle-yellow":
		empty = "âšª"
		done = "ðŸŸ¡"
	case "circle-red":
		empty = "âšª"
		done = "ðŸ”´"
	case "circle-purple":
		empty = "âšª"
		done = "ðŸŸ£"
	case "circle-orange":
		empty = "âšª"
		done = "ðŸŸ "
	case "circle-blue":
		empty = "âšª"
		done = "ðŸ”µ"
	case "circle-black":
		empty = "âšª"
		done = "âš«"
	case "default":
		empty = "â–‘"
		done = "â–ˆ"
	default:
		empty = "â–‘"
		done = "â–ˆ"
	}

	var graph string
	graph += "<h2>Last 7 Days</h2>"

	for i, l := range langs {
		if i > 4 {
			break
		}
		percent := math.Round(l.Percent)
		graph += fmt.Sprintf("%-15s %15s %s %5.2f %%</br>", l.Name, l.Text, strings.Repeat(done, int(percent/4))+strings.Repeat(empty, int(25-int(percent/4))), l.Percent)
	}

	return graph
}

func CreateAllTimeData(data stats.AllTimeStats) string {
	markdown := "<h2>All Time</h2>"
	markdown += fmt.Sprintf("<strong>Total Time Coded: </strong>%s", data.Data.Text)
	return markdown
}
